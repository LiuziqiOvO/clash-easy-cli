#!/bin/bash

# Clash for Linux 统一管理工具
# 作者: AI Assistant
# 版本: 1.0.0

# 获取脚本工作目录绝对路径
export SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# 检查依赖
check_dependencies() {
    local missing_deps=()
    
    # 检查必需的命令
    for cmd in curl wget; do
        if ! command -v $cmd &> /dev/null; then
            missing_deps+=($cmd)
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "缺少必需的依赖: ${missing_deps[*]}"
        log_info "请安装缺少的依赖后重试"
        return 1
    fi
    
    # 检查可选依赖
    if ! command -v jq &> /dev/null; then
        log_warn "jq 未安装，延迟测试和节点选择功能将不可用"
        log_info "安装方法: sudo apt-get install jq (Ubuntu/Debian) 或 sudo yum install jq (CentOS/RHEL)"
    fi
    
    return 0
}

# 获取Clash状态
get_clash_status() {
    local pid=$(ps -ef | grep [c]lash-linux-a | awk '{print $2}')
    if [ -n "$pid" ]; then
        echo "running:$pid"
    else
        echo "stopped"
    fi
}

# 获取Secret
get_secret() {
    if [ -f "$SCRIPT_DIR/.env" ]; then
        source "$SCRIPT_DIR/.env"
        if [ -n "$CLASH_SECRET" ]; then
            echo "$CLASH_SECRET"
        else
            # 从配置文件中读取
            if [ -f "$SCRIPT_DIR/conf/config.yaml" ]; then
                grep "^secret:" "$SCRIPT_DIR/conf/config.yaml" | awk '{print $2}' | tr -d "'"
            fi
        fi
    fi
}

# 检查Clash API是否可用
check_clash_api() {
    local secret=$(get_secret)
    local headers=()
    if [ -n "$secret" ]; then
        headers=(-H "Authorization: Bearer $secret")
    fi
    
    if curl -s -m 3 "${headers[@]}" "http://127.0.0.1:9090" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# 显示状态
show_status() {
    echo "==================== Clash 状态 ===================="
    
    local status=$(get_clash_status)
    if [[ $status == running:* ]]; then
        local pid=${status#running:}
        log_info "Clash 服务状态: 运行中 (PID: $pid)"
        
        # 检查端口
        local ports=(7890 7891 7892 9090)
        local port_status=""
        for port in "${ports[@]}"; do
            if netstat -tln 2>/dev/null | grep -q ":$port "; then
                port_status+="$port:✓ "
            else
                port_status+="$port:✗ "
            fi
        done
        log_info "端口状态: $port_status"
        
        # 检查API
        if check_clash_api; then
            log_info "Clash API: 可用"
            log_info "Dashboard: http://$(hostname -I | awk '{print $1}'):9090/ui"
        else
            log_warn "Clash API: 不可用"
        fi
        
        # 检查代理状态
        if [ -n "$http_proxy" ]; then
            log_info "系统代理: 已开启 ($http_proxy)"
        else
            log_warn "系统代理: 未开启"
        fi
    else
        log_warn "Clash 服务状态: 未运行"
    fi
    
    echo "=================================================="
}

# 获取当前代理节点信息
get_current_proxy() {
    local secret=$(get_secret)
    local headers=()
    if [ -n "$secret" ]; then
        headers=(-H "Authorization: Bearer $secret")
    fi
    
    # 获取当前选中的代理组
    local selector_info=$(curl -s -m 5 "${headers[@]}" "http://127.0.0.1:9090/proxies/%F0%9F%94%B0%20%E8%8A%82%E7%82%B9%E9%80%89%E6%8B%A9" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$selector_info" ]; then
        # 尝试其他常见的代理组名称
        local common_names=("GLOBAL" "Proxy" "🔰 节点选择" "节点选择" "代理选择")
        for name in "${common_names[@]}"; do
            local encoded_name=$(printf '%s' "$name" | jq -sRr @uri)
            selector_info=$(curl -s -m 5 "${headers[@]}" "http://127.0.0.1:9090/proxies/$encoded_name" 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$selector_info" ]; then
                break
            fi
        done
    fi
    
    if [ -n "$selector_info" ] && command -v jq &> /dev/null; then
        echo "$selector_info" | jq -r '.now // "未知节点"' 2>/dev/null || echo "未知节点"
    else
        echo "未知节点"
    fi
}

# 测试 Google 延迟
test_google_latency() {
    local start_time=$(date +%s%3N)
    local http_code
    
    # 通过代理测试 Google 连接
    if [ -n "$http_proxy" ]; then
        http_code=$(curl -o /dev/null -s -m 10 -w "%{http_code}" --proxy "$http_proxy" "http://www.google.com/generate_204" 2>/dev/null)
    else
        http_code=$(curl -o /dev/null -s -m 10 -w "%{http_code}" "http://www.google.com/generate_204" 2>/dev/null)
    fi
    
    local end_time=$(date +%s%3N)
    local latency=$((end_time - start_time))
    
    if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
        echo "${latency}ms"
    else
        echo "超时"
    fi
}

# 显示代理信息
show_proxy_info() {
    if check_clash_api; then
        local current_proxy=$(get_current_proxy)
        local latency=$(test_google_latency)
        
        echo ""
        log_info "当前节点: $current_proxy"
        log_info "Google 延迟: $latency"
        echo ""
    fi
}

# Toggle 开关功能
toggle_clash() {
    local status=$(get_clash_status)
    
    if [[ $status == running:* ]]; then
        # 当前运行中，执行关闭
        echo "🔄 检测到 Clash 正在运行，正在关闭..."
        stop_clash
    else
        # 当前未运行，执行开启
        echo "🔄 检测到 Clash 未运行，正在启动..."
        if start_clash; then
            # 启动成功后显示节点信息
            show_proxy_info
        fi
    fi
}

# 配置向导
config_wizard() {
    echo "==================== Clash 配置向导 ===================="
    
    # 检查现有配置
    if [ -f "$SCRIPT_DIR/.env" ]; then
        source "$SCRIPT_DIR/.env"
        if [ -n "$CLASH_URL" ]; then
            echo "当前订阅地址: $CLASH_URL"
            read -p "是否要更改订阅地址? (y/N): " change_url
            if [[ ! $change_url =~ ^[Yy]$ ]]; then
                log_info "保持现有配置"
                return 0
            fi
        fi
    fi
    
    # 输入新的订阅地址
    echo ""
    echo "请输入 Clash 订阅地址:"
    echo "注意: 请确保订阅地址有效且可访问"
    read -p "订阅地址: " new_url
    
    if [ -z "$new_url" ]; then
        log_error "订阅地址不能为空"
        return 1
    fi
    
    # 验证订阅地址
    log_info "正在验证订阅地址..."
    if curl -o /dev/null -L -k -sS --retry 3 -m 10 --connect-timeout 10 -w "%{http_code}" "$new_url" | grep -E '^[23][0-9]{2}$' &>/dev/null; then
        log_info "订阅地址验证成功"
    else
        log_error "订阅地址验证失败，请检查地址是否正确"
        return 1
    fi
    
    # 更新配置文件
    if [ -f "$SCRIPT_DIR/.env" ]; then
        # 备份原配置
        cp "$SCRIPT_DIR/.env" "$SCRIPT_DIR/.env.bak.$(date +%Y%m%d_%H%M%S)"
        # 更新URL
        sed -i "s|^export CLASH_URL=.*|export CLASH_URL='$new_url'|" "$SCRIPT_DIR/.env"
    else
        # 创建新配置文件
        cat > "$SCRIPT_DIR/.env" << EOF
# Clash 订阅地址
export CLASH_URL='$new_url'
export CLASH_SECRET=''

# 设置为1以跳过订阅检查和下载
SKIP_SUBSCRIPTION_CHECK=0
EOF
    fi
    
    log_info "配置已保存到 .env 文件"
    echo "=================================================="
}

# 一键启动
start_clash() {
    echo "==================== 启动 Clash ===================="
    
    # 检查依赖
    if ! check_dependencies; then
        return 1
    fi
    
    # 检查是否已运行
    local status=$(get_clash_status)
    if [[ $status == running:* ]]; then
        log_warn "Clash 已在运行中"
        show_status
        return 0
    fi
    
    # 检查配置
    if [ ! -f "$SCRIPT_DIR/.env" ]; then
        log_warn "未找到配置文件，启动配置向导..."
        if ! config_wizard; then
            return 1
        fi
    fi
    
    # 执行启动脚本
    log_info "正在启动 Clash 服务..."
    if sudo bash "$SCRIPT_DIR/start.sh"; then
        # 自动加载环境变量
        if [ -f "/etc/profile.d/clash.sh" ]; then
            source /etc/profile.d/clash.sh
            # 自动开启代理
            proxy_on
            log_info "Clash 启动成功并已开启系统代理"
            
            # 等待服务完全启动
            sleep 3
            
            # 显示当前节点和延迟信息
            show_proxy_info
        else
            log_warn "环境变量文件未创建，请手动执行: source /etc/profile.d/clash.sh"
        fi
    else
        log_error "Clash 启动失败"
        return 1
    fi
    
    echo "=================================================="
}

# 停止服务
stop_clash() {
    echo "==================== 停止 Clash ===================="
    
    # 关闭系统代理
    if [ -f "/etc/profile.d/clash.sh" ]; then
        source /etc/profile.d/clash.sh
        if command -v proxy_off &> /dev/null; then
            proxy_off
        fi
    fi
    
    # 执行停止脚本
    if sudo bash "$SCRIPT_DIR/shutdown.sh"; then
        log_info "Clash 已停止"
    else
        log_error "停止 Clash 失败"
        return 1
    fi
    
    echo "=================================================="
}

# 重启服务
restart_clash() {
    echo "==================== 重启 Clash ===================="
    
    # 检查是否运行
    local status=$(get_clash_status)
    if [[ $status == running:* ]]; then
        log_info "正在停止 Clash..."
        stop_clash
        sleep 2
    fi
    
    log_info "正在启动 Clash..."
    start_clash
    
    echo "=================================================="
}

# 延迟测试
test_latency() {
    echo "==================== 延迟测试 ===================="
    
    # 检查jq依赖
    if ! command -v jq &> /dev/null; then
        log_error "延迟测试需要 jq 工具，请先安装"
        log_info "安装方法: sudo apt-get install jq (Ubuntu/Debian) 或 sudo yum install jq (CentOS/RHEL)"
        return 1
    fi
    
    # 检查Clash是否运行
    if ! check_clash_api; then
        log_error "Clash 未运行或 API 不可用，请先启动 Clash"
        return 1
    fi
    
    # 执行延迟测试
    bash "$SCRIPT_DIR/scripts/clash_latency.sh"
    
    echo "=================================================="
}

# 节点选择
select_proxy() {
    echo "==================== 节点选择 ===================="
    
    # 检查jq依赖
    if ! command -v jq &> /dev/null; then
        log_error "节点选择需要 jq 工具，请先安装"
        log_info "安装方法: sudo apt-get install jq (Ubuntu/Debian) 或 sudo yum install jq (CentOS/RHEL)"
        return 1
    fi
    
    # 检查Clash是否运行
    if ! check_clash_api; then
        log_error "Clash 未运行或 API 不可用，请先启动 Clash"
        return 1
    fi
    
    # 自动配置Secret并执行节点选择
    local secret=$(get_secret)
    if [ -n "$secret" ]; then
        # 临时修改脚本中的Secret
        local temp_script="/tmp/clash_proxy_selector_temp.sh"
        sed "s/Secret=\"填写Clash Secret\"/Secret=\"$secret\"/" "$SCRIPT_DIR/scripts/clash_proxy-selector.sh" > "$temp_script"
        chmod +x "$temp_script"
        bash "$temp_script"
        rm -f "$temp_script"
    else
        log_error "无法获取 Clash Secret，请检查配置"
        return 1
    fi
    
    echo "=================================================="
}

# 开启代理
enable_proxy() {
    if [ -f "/etc/profile.d/clash.sh" ]; then
        source /etc/profile.d/clash.sh
        if command -v proxy_on &> /dev/null; then
            proxy_on
        else
            log_error "代理函数未找到，请先启动 Clash"
        fi
    else
        log_error "环境变量文件未找到，请先启动 Clash"
    fi
}

# 关闭代理
disable_proxy() {
    if [ -f "/etc/profile.d/clash.sh" ]; then
        source /etc/profile.d/clash.sh
        if command -v proxy_off &> /dev/null; then
            proxy_off
        else
            log_error "代理函数未找到"
        fi
    else
        log_error "环境变量文件未找到"
    fi
}

# 显示帮助
show_help() {
    cat << EOF
Clash for Linux 统一管理工具

用法: clash <命令> [选项]

命令:
  start      启动 Clash 服务 (包含自动开启系统代理)
  stop       停止 Clash 服务 (包含关闭系统代理)
  restart    重启 Clash 服务
  status     显示 Clash 运行状态
  config     配置向导 (设置订阅地址等)
  test       测试所有代理节点延迟
  select     选择代理节点和模式
  on         开启系统代理
  off        关闭系统代理
  help       显示此帮助信息

示例:
  clash start          # 一键启动 Clash 并开启代理
  clash status         # 查看运行状态
  clash config         # 配置订阅地址
  clash test           # 测试节点延迟
  clash select         # 选择代理节点

注意:
- 首次使用请先运行 'clash config' 配置订阅地址
- 延迟测试和节点选择功能需要安装 jq 工具
- 部分操作需要 sudo 权限

项目地址: https://github.com/Elegycloud/clash-for-linux-backup
EOF
}

# 主函数
main() {
    case "${1:-help}" in
        start)
            start_clash
            ;;
        stop)
            stop_clash
            ;;
        restart)
            restart_clash
            ;;
        status)
            show_status
            ;;
        config)
            config_wizard
            ;;
        test)
            test_latency
            ;;
        select)
            select_proxy
            ;;
        on)
            enable_proxy
            ;;
        off)
            disable_proxy
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "未知命令: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# 执行主函数
main "$@" 